/*
 * Паттерны проектирования GoF
 *
 * Design of Patterns: Elements of Reusable Object-Orientiered Software by Erich Gamma - первоисточник
 *
 * Типы паттернов:
 * 1. Порождающие
 *  Вместо конструктора
 *
 *      а) Абстрактная фабрика и фабричный метод
 *          Фабричный метод может быть в самом классе
 *          Абстрактная фабрика - отдельный класс, отдельный интерфейс
 *      б) Builder
 *      в) Прототип
 *      г) Синглтон - объект, который технически в системе может быть только один
 *          очень похож на глобальную переменную.
 *          Немножко антипаттерн
 *          Код на википедии
 * 2. Структурные
 *  Структурное описание программы
 *  Уменьшают связность
 *  Унифицировать поведение
 *
 *      а) Адаптер
 *          Есть интерфейс, которым хочет пользоваться клиент
 *          Adaptee- тот, который будет использоваться.
 *          Например у него плохой интрфейс.
 *
 *          class DListImpStack<T> extednds DList{
 *              //Переопределение методов стэка через лист
 *          }
 *      б) Мост
 *          Например JDBC-driver
 *      в) Декоратор
 *          Альтернатива наследовнию
 *
 *          class Decorator implements Component{
 *              private Component component;
 *              public Decorator(Component component){
 *                  this.component = component;
 *              }
 *              public int operation(){
 *                  long millis = now()
 *                  component.operation;
 *                  long endTime = now()
 *                  log.info(Time is ...)
 *              }
 *          }
 *          Хорош для логгирования
 *       г) Прокси
 *          Виртуальный
 *          Удаленный
 *          Доступа
 *          Умный === (декоратор)
 *       д) Фасад - общий интерфейс к группе интерфейсов
 *          Имплементит все похожие объекты
 * 3. Поведенческие
 *       а) Цепочки обязанностей - посредник, через которого классы ходят друг к другу.
 *       б) Наблюдатель - нотифицирует все нужные объекты об изменении в наблюдаемом объекте
 *       в) Посетитель
 *          Есть двумерная точка и трехмерная точка.
 *          Можно почитать на хабре
 *       г) Стратегия
 *       д) Шаблонный метод
 *       е) Посредник(Медиатор). Все классы общаются через медиатор.
 * */

public class Main {
    public static void main(String args[]){
        /*Фабрика
        * При запуске программы в фабрику вводятся все необходимые параметры и
        * при создании новых классов через фабрику эти параметры учитываются*/

    }
}
